{"version":3,"sources":["views/Form.module.css","views/Login/Login.js"],"names":["module","exports","INITIAL_VALUES","email","password","Login","dispatch","useDispatch","errorMessage","useSelector","authSelectors","getErrorMessage","useState","showPassword","setShowPassword","validate","useCallback","values","errors","test","length","handleSubmit","setSubmitting","authOperations","logIn","handleClickShowPassword","className","s","formWrapper","formTitle","initialValues","onSubmit","isSubmitting","touched","handleBlur","handleChange","form","TextField","fullWidth","id","name","label","value","onChange","onBlur","error","Boolean","helperText","Box","sx","display","type","Button","onClick","color","variant","disabled","Object","keys","registerInfo","to","link","Alert","severity"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,YAAc,0BAA0B,UAAY,wBAAwB,KAAO,mBAAmB,aAAe,2BAA2B,KAAO,qB,mOCYnKC,EAAiB,CACnBC,MAAO,GACPC,SAAU,IA2GCC,EAxGD,WACV,IAAMC,EAAWC,cACXC,EAAeC,YAAYC,IAAcC,iBAC/C,EAAwCC,oBAAS,GAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KAEMC,EAAWC,uBAAY,SAACC,GAC1B,IAAMC,EAAS,GAef,OAdKD,EAAOd,MAGP,2CAA2CgB,KAAKF,EAAOd,SAExDe,EAAOf,MAAQ,yBAJfe,EAAOf,MAAQ,WAOdc,EAAOb,SAEDa,EAAOb,SAASgB,OAAS,IAChCF,EAAOd,SAAW,+CAFlBc,EAAOd,SAAW,WAKfc,IACR,IAEGG,EAAeL,uBAAY,SAACC,EAAD,GAAgC,IAArBK,EAAoB,EAApBA,cACxChB,EAASiB,IAAeC,MAAMP,IAC9BK,GAAc,KACf,CAAChB,IAEEmB,EAA0B,WAC5BX,GAAgB,SAAAD,GAAY,OAAKA,MAGrC,OACI,sBAAKa,UAAWC,IAAEC,YAAlB,UACI,oBAAIF,UAAWC,IAAEE,UAAjB,wBACA,cAAC,IAAD,CACAC,cAAe5B,EACfa,SAAUA,EACVgB,SAAUV,EAHV,SAKC,gBAAGW,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,QAASf,EAA1B,EAA0BA,OAAQD,EAAlC,EAAkCA,OAAQI,EAA1C,EAA0CA,aAAca,EAAxD,EAAwDA,WAAYC,EAApE,EAAoEA,aAApE,OACG,uBAAMJ,SAAUV,EAAcK,UAAWC,IAAES,KAA3C,UACA,cAACC,EAAA,EAAD,CACAC,WAAS,EACTC,GAAG,QACHC,KAAK,QACLC,MAAM,QACNC,MAAOzB,EAAOd,MACdwC,SAAUR,EACVS,OAAQV,EACRW,MAAOZ,EAAQ9B,OAAS2C,QAAQ5B,EAAOf,OACvC4C,WAAYd,EAAQ9B,OAASe,EAAOf,QAEpC,eAAC6C,EAAA,EAAD,CAAKC,GAAI,CAAEC,QAAS,QAApB,UACI,cAACb,EAAA,EAAD,CACAC,WAAS,EACTC,GAAG,WACHC,KAAK,WACLC,MAAM,WACNU,KAAMtC,EAAc,OAAS,WAC7B6B,MAAOzB,EAAOb,SACduC,SAAUR,EACVS,OAAQV,EACRW,MAAOZ,EAAQ7B,UAAY0C,QAAQ5B,EAAOd,UAC1C2C,WAAYd,EAAQ7B,UAAYc,EAAOd,WAEvC,cAACgD,EAAA,EAAD,CACIC,QAAS5B,EADb,SAGKZ,EAAe,cAAC,IAAD,IAAwB,cAAC,IAAD,SAIhD,cAACuC,EAAA,EAAD,CACIE,MAAM,UACNC,QAAQ,YACRjB,WAAS,EAACa,KAAK,SACfK,SACIxB,KAEIyB,OAAOC,KAAKzB,GAASb,SACrBqC,OAAOC,KAAKxD,GAAgBkB,QACG,IAA/BqC,OAAOC,KAAKxC,GAAQE,QAThC,0BAkBJ,sBAAKM,UAAWC,IAAEgC,aAAlB,UACI,kEACA,cAAC,IAAD,CAAMC,GAAG,YAAYlC,UAAWC,IAAEkC,KAAlC,yBAGHrD,GAAgB,cAACsD,EAAA,EAAD,CAAOC,SAAS,QAAhB,SACZvD","file":"static/js/login-wiew.f7415c05.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formWrapper\":\"Form_formWrapper__pes7n\",\"formTitle\":\"Form_formTitle__2OH_D\",\"form\":\"Form_form__2dlLs\",\"registerInfo\":\"Form_registerInfo__vYh4m\",\"link\":\"Form_link__2YWq5\"};","import React, { useCallback, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { Formik } from 'formik';\nimport { authOperations, authSelectors } from 'redux/auth';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Box from '@material-ui/core/Box';\nimport VisibilityIcon from '@material-ui/icons/Visibility';\nimport VisibilityOffIcon from '@material-ui/icons/VisibilityOff';\nimport Alert from '@mui/material/Alert';\nimport s from '../Form.module.css';\n\nconst INITIAL_VALUES = {\n    email: \"\",\n    password: \"\",\n};\n\nconst Login = () => {\n    const dispatch = useDispatch();\n    const errorMessage = useSelector(authSelectors.getErrorMessage);\n    const [showPassword, setShowPassword] = useState(false);\n\n    const validate = useCallback((values) => {\n        const errors = {};\n        if (!values.email) {\n            errors.email = 'Required';\n        } else if (\n            !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)\n        ) {\n            errors.email = 'Invalid email address';\n        }\n\n        if (!values.password) {\n            errors.password = 'Required';\n        } else if (values.password.length < 8) {\n            errors.password = 'Password should contain more then 8 symbols';\n        }\n\n        return errors;\n    }, []);\n\n    const handleSubmit = useCallback((values, { setSubmitting }) => {\n        dispatch(authOperations.logIn(values));\n        setSubmitting(false); \n    }, [dispatch]);\n\n    const handleClickShowPassword = () => {\n        setShowPassword(showPassword => !showPassword);\n    };\n\n    return (\n        <div className={s.formWrapper}>\n            <h2 className={s.formTitle}>Login form</h2>\n            <Formik\n            initialValues={INITIAL_VALUES}\n            validate={validate}\n            onSubmit={handleSubmit}\n            >\n            {({ isSubmitting, touched, errors, values, handleSubmit, handleBlur, handleChange }) => (\n                <form onSubmit={handleSubmit} className={s.form}>\n                <TextField\n                fullWidth\n                id=\"email\"\n                name=\"email\"\n                label=\"Email\"\n                value={values.email}\n                onChange={handleChange}\n                onBlur={handleBlur}\n                error={touched.email && Boolean(errors.email)}\n                helperText={touched.email && errors.email}\n                />\n                <Box sx={{ display: 'flex'}}>\n                    <TextField\n                    fullWidth\n                    id=\"password\"\n                    name=\"password\"\n                    label=\"Password\"\n                    type={showPassword? \"text\" : \"password\"}\n                    value={values.password}\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    error={touched.password && Boolean(errors.password)}\n                    helperText={touched.password && errors.password}\n                    />\n                    <Button \n                        onClick={handleClickShowPassword}\n                    > \n                        {showPassword ? <VisibilityOffIcon /> : <VisibilityIcon />}\n                    </Button>\n                </Box>\n\n                <Button \n                    color=\"primary\" \n                    variant=\"contained\" \n                    fullWidth type=\"submit\"\n                    disabled={\n                        isSubmitting\n                        || !(\n                            Object.keys(touched).length ===\n                            Object.keys(INITIAL_VALUES).length &&\n                            Object.keys(errors).length === 0\n                        )\n                    }\n                >\n                Submit\n                </Button>\n            </form>\n            )}\n            </Formik>\n            <div className={s.registerInfo}>\n                <span>If you don't have an account  </span>\n                <Link to=\"/register\" className={s.link}>register</Link>\n            </div>\n\n            {errorMessage && <Alert severity=\"error\">\n                {errorMessage}\n            </Alert>}\n        </div>\n    );\n};\n\nexport default Login;"],"sourceRoot":""}
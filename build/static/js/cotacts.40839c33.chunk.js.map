{"version":3,"sources":["../node_modules/shortid/lib/alphabet.js","../node_modules/shortid/index.js","components/ContactList/ContactList.module.css","../node_modules/shortid/lib/index.js","../node_modules/shortid/lib/random/random-from-seed.js","../node_modules/shortid/lib/build.js","../node_modules/shortid/lib/generate.js","../node_modules/shortid/lib/random/random-byte-browser.js","../node_modules/shortid/node_modules/nanoid/format.browser.js","../node_modules/shortid/lib/is-valid.js","../node_modules/shortid/lib/util/cluster-worker-id-browser.js","components/ContactForm/ContactForm.module.css","components/Filter/Filter.module.css","components/ContactsWrapper/ContactsWrapper.module.css","redux/contactForm/contacts-operations.js","redux/contactForm/contacts-selector.js","components/ContactList/ContactList.js","components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/ContactsWrapper/ContactsWrapper.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js"],"names":["alphabet","previousSeed","shuffled","randomFromSeed","require","ORIGINAL","reset","setCharacters","_alphabet_","length","Error","unique","split","filter","item","ind","arr","lastIndexOf","join","getShuffled","characterIndex","sourceArray","targetArray","r","nextValue","Math","floor","push","splice","shuffle","module","exports","get","characters","seed","lookup","index","build","isValid","clusterWorkerId","generate","seedValue","worker","workerId","newCharacters","undefined","_seed_","counter","previousSeconds","str","seconds","Date","now","random","format","number","done","loopCounter","pow","randomByte","crypto","window","msCrypto","getRandomValues","size","Uint8Array","bytes","i","mask","log","LN2","step","id","RegExp","replace","test","axios","defaults","baseURL","fetchContacts","dispatch","fetchContactsRequest","then","data","fetchContactsSuccess","catch","error","fetchContactsError","addContact","name","contact","addContactRequest","post","addContactSuccess","addContactError","deleteContact","deleteContactRequest","delete","deleteContactSuccess","deleteContactError","getContacts","state","contacts","items","getIsLoading","loading","getFilter","getVisibleContacts","createSelector","allContacts","lowerCasedFilter","toLocaleLowerCase","includes","connect","contactsSelectors","onDeleteContact","contactsOperations","useEffect","className","s","list","map","type","onClick","isLoading","onSubmit","useState","setName","setNumber","nameInputId","shortid","numberInputId","handleChange","evt","currentTarget","value","preventDefault","foundNames","lowerName","alert","form","label","htmlFor","input","pattern","title","required","onChange","button","contactsActions","target","inputId","labeltId","context","_slicedToArray","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","_s","_i","next","err","unsupportedIterableToArray","TypeError"],"mappings":"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","file":"static/js/cotacts.40839c33.chunk.js","sourcesContent":["'use strict';\n\nvar randomFromSeed = require('./random/random-from-seed');\n\nvar ORIGINAL = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-';\nvar alphabet;\nvar previousSeed;\n\nvar shuffled;\n\nfunction reset() {\n    shuffled = false;\n}\n\nfunction setCharacters(_alphabet_) {\n    if (!_alphabet_) {\n        if (alphabet !== ORIGINAL) {\n            alphabet = ORIGINAL;\n            reset();\n        }\n        return;\n    }\n\n    if (_alphabet_ === alphabet) {\n        return;\n    }\n\n    if (_alphabet_.length !== ORIGINAL.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. You submitted ' + _alphabet_.length + ' characters: ' + _alphabet_);\n    }\n\n    var unique = _alphabet_.split('').filter(function(item, ind, arr){\n       return ind !== arr.lastIndexOf(item);\n    });\n\n    if (unique.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. These characters were not unique: ' + unique.join(', '));\n    }\n\n    alphabet = _alphabet_;\n    reset();\n}\n\nfunction characters(_alphabet_) {\n    setCharacters(_alphabet_);\n    return alphabet;\n}\n\nfunction setSeed(seed) {\n    randomFromSeed.seed(seed);\n    if (previousSeed !== seed) {\n        reset();\n        previousSeed = seed;\n    }\n}\n\nfunction shuffle() {\n    if (!alphabet) {\n        setCharacters(ORIGINAL);\n    }\n\n    var sourceArray = alphabet.split('');\n    var targetArray = [];\n    var r = randomFromSeed.nextValue();\n    var characterIndex;\n\n    while (sourceArray.length > 0) {\n        r = randomFromSeed.nextValue();\n        characterIndex = Math.floor(r * sourceArray.length);\n        targetArray.push(sourceArray.splice(characterIndex, 1)[0]);\n    }\n    return targetArray.join('');\n}\n\nfunction getShuffled() {\n    if (shuffled) {\n        return shuffled;\n    }\n    shuffled = shuffle();\n    return shuffled;\n}\n\n/**\n * lookup shuffled letter\n * @param index\n * @returns {string}\n */\nfunction lookup(index) {\n    var alphabetShuffled = getShuffled();\n    return alphabetShuffled[index];\n}\n\nfunction get () {\n  return alphabet || ORIGINAL;\n}\n\nmodule.exports = {\n    get: get,\n    characters: characters,\n    seed: setSeed,\n    lookup: lookup,\n    shuffled: getShuffled\n};\n","'use strict';\nmodule.exports = require('./lib/index');\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__2T7aG\",\"item\":\"ContactList_item__3YsZK\"};","'use strict';\n\nvar alphabet = require('./alphabet');\nvar build = require('./build');\nvar isValid = require('./is-valid');\n\n// if you are using cluster or multiple servers use this to make each instance\n// has a unique value for worker\n// Note: I don't know if this is automatically set when using third\n// party cluster solutions such as pm2.\nvar clusterWorkerId = require('./util/cluster-worker-id') || 0;\n\n/**\n * Set the seed.\n * Highly recommended if you don't want people to try to figure out your id schema.\n * exposed as shortid.seed(int)\n * @param seed Integer value to seed the random alphabet.  ALWAYS USE THE SAME SEED or you might get overlaps.\n */\nfunction seed(seedValue) {\n    alphabet.seed(seedValue);\n    return module.exports;\n}\n\n/**\n * Set the cluster worker or machine id\n * exposed as shortid.worker(int)\n * @param workerId worker must be positive integer.  Number less than 16 is recommended.\n * returns shortid module so it can be chained.\n */\nfunction worker(workerId) {\n    clusterWorkerId = workerId;\n    return module.exports;\n}\n\n/**\n *\n * sets new characters to use in the alphabet\n * returns the shuffled alphabet\n */\nfunction characters(newCharacters) {\n    if (newCharacters !== undefined) {\n        alphabet.characters(newCharacters);\n    }\n\n    return alphabet.shuffled();\n}\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction generate() {\n  return build(clusterWorkerId);\n}\n\n// Export all other functions as properties of the generate function\nmodule.exports = generate;\nmodule.exports.generate = generate;\nmodule.exports.seed = seed;\nmodule.exports.worker = worker;\nmodule.exports.characters = characters;\nmodule.exports.isValid = isValid;\n","'use strict';\n\n// Found this seed-based random generator somewhere\n// Based on The Central Randomizer 1.3 (C) 1997 by Paul Houle (houle@msc.cornell.edu)\n\nvar seed = 1;\n\n/**\n * return a random number based on a seed\n * @param seed\n * @returns {number}\n */\nfunction getNextValue() {\n    seed = (seed * 9301 + 49297) % 233280;\n    return seed/(233280.0);\n}\n\nfunction setSeed(_seed_) {\n    seed = _seed_;\n}\n\nmodule.exports = {\n    nextValue: getNextValue,\n    seed: setSeed\n};\n","'use strict';\n\nvar generate = require('./generate');\nvar alphabet = require('./alphabet');\n\n// Ignore all milliseconds before a certain time to reduce the size of the date entropy without sacrificing uniqueness.\n// This number should be updated every year or so to keep the generated id short.\n// To regenerate `new Date() - 0` and bump the version. Always bump the version!\nvar REDUCE_TIME = 1567752802062;\n\n// don't change unless we change the algos or REDUCE_TIME\n// must be an integer and less than 16\nvar version = 7;\n\n// Counter is used when shortid is called multiple times in one second.\nvar counter;\n\n// Remember the last time shortid was called in case counter is needed.\nvar previousSeconds;\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction build(clusterWorkerId) {\n    var str = '';\n\n    var seconds = Math.floor((Date.now() - REDUCE_TIME) * 0.001);\n\n    if (seconds === previousSeconds) {\n        counter++;\n    } else {\n        counter = 0;\n        previousSeconds = seconds;\n    }\n\n    str = str + generate(version);\n    str = str + generate(clusterWorkerId);\n    if (counter > 0) {\n        str = str + generate(counter);\n    }\n    str = str + generate(seconds);\n    return str;\n}\n\nmodule.exports = build;\n","'use strict';\n\nvar alphabet = require('./alphabet');\nvar random = require('./random/random-byte');\nvar format = require('nanoid/format');\n\nfunction generate(number) {\n    var loopCounter = 0;\n    var done;\n\n    var str = '';\n\n    while (!done) {\n        str = str + format(random, alphabet.get(), 1);\n        done = number < (Math.pow(16, loopCounter + 1 ) );\n        loopCounter++;\n    }\n    return str;\n}\n\nmodule.exports = generate;\n","'use strict';\n\nvar crypto = typeof window === 'object' && (window.crypto || window.msCrypto); // IE 11 uses window.msCrypto\n\nvar randomByte;\n\nif (!crypto || !crypto.getRandomValues) {\n    randomByte = function(size) {\n        var bytes = [];\n        for (var i = 0; i < size; i++) {\n            bytes.push(Math.floor(Math.random() * 256));\n        }\n        return bytes;\n    };\n} else {\n    randomByte = function(size) {\n        return crypto.getRandomValues(new Uint8Array(size));\n    };\n}\n\nmodule.exports = randomByte;\n","// This file replaces `format.js` in bundlers like webpack or Rollup,\n// according to `browser` config in `package.json`.\n\nmodule.exports = function (random, alphabet, size) {\n  // We can’t use bytes bigger than the alphabet. To make bytes values closer\n  // to the alphabet, we apply bitmask on them. We look for the closest\n  // `2 ** x - 1` number, which will be bigger than alphabet size. If we have\n  // 30 symbols in the alphabet, we will take 31 (00011111).\n  // We do not use faster Math.clz32, because it is not available in browsers.\n  var mask = (2 << Math.log(alphabet.length - 1) / Math.LN2) - 1\n  // Bitmask is not a perfect solution (in our example it will pass 31 bytes,\n  // which is bigger than the alphabet). As a result, we will need more bytes,\n  // than ID size, because we will refuse bytes bigger than the alphabet.\n\n  // Every hardware random generator call is costly,\n  // because we need to wait for entropy collection. This is why often it will\n  // be faster to ask for few extra bytes in advance, to avoid additional calls.\n\n  // Here we calculate how many random bytes should we call in advance.\n  // It depends on ID length, mask / alphabet size and magic number 1.6\n  // (which was selected according benchmarks).\n\n  // -~f => Math.ceil(f) if n is float number\n  // -~i => i + 1 if n is integer number\n  var step = -~(1.6 * mask * size / alphabet.length)\n  var id = ''\n\n  while (true) {\n    var bytes = random(step)\n    // Compact alternative for `for (var i = 0; i < step; i++)`\n    var i = step\n    while (i--) {\n      // If random byte is bigger than alphabet even after bitmask,\n      // we refuse it by `|| ''`.\n      id += alphabet[bytes[i] & mask] || ''\n      // More compact than `id.length + 1 === size`\n      if (id.length === +size) return id\n    }\n  }\n}\n","'use strict';\nvar alphabet = require('./alphabet');\n\nfunction isShortId(id) {\n    if (!id || typeof id !== 'string' || id.length < 6 ) {\n        return false;\n    }\n\n    var nonAlphabetic = new RegExp('[^' +\n      alphabet.get().replace(/[|\\\\{}()[\\]^$+*?.-]/g, '\\\\$&') +\n    ']');\n    return !nonAlphabetic.test(id);\n}\n\nmodule.exports = isShortId;\n","'use strict';\n\nmodule.exports = 0;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__1fuOn\",\"label\":\"ContactForm_label__378f8\",\"input\":\"ContactForm_input__gm87B\",\"button\":\"ContactForm_button__1MLZK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Filter_form__2qyBI\",\"label\":\"Filter_label__3DcZT\",\"input\":\"Filter_input__2DoVp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"context\":\"ContactsWrapper_context__2NbVj\"};","import { \n  addContactError, \n  addContactSuccess, \n  addContactRequest, \n  deleteContactError,\n  deleteContactSuccess,\n  deleteContactRequest,\n  fetchContactsError,\n  fetchContactsSuccess,\n  fetchContactsRequest, \n} from './contacts-actions';\nimport axios from \"axios\";\n\naxios.defaults.baseURL = 'http://connections-api.herokuapp.com';\n\nexport const fetchContacts = () => dispatch => {\n  dispatch(fetchContactsRequest());\n\n  axios.get('/contacts')\n    .then(({ data }) => dispatch(fetchContactsSuccess(data)))\n    .catch(error => dispatch(fetchContactsError(error)));\n};\n\nexport const addContact = (name, number) => dispatch => {\n  const contact = {\n      name,\n      number,\n  };\n\n  dispatch(addContactRequest());\n\n  axios.post('/contacts', contact)\n      .then(({ data }) => dispatch(addContactSuccess(data)))\n      .catch(error => dispatch(addContactError(error)));\n};\n\nexport const deleteContact = id => dispatch => {\n  dispatch(deleteContactRequest());\n\n  axios.delete(`/contacts/${id}`)\n    .then(() => dispatch(deleteContactSuccess(id)))\n    .catch(error => dispatch(deleteContactError(error)));\n};\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const getContacts = state => state.contacts.items;\nexport const getIsLoading = state => state.contacts.loading;\nexport const getFilter = state => state.contacts.filter;\nexport const getVisibleContacts = createSelector(\n    [getContacts, getFilter], \n    (allContacts, filter) => {\n        const lowerCasedFilter = filter.toLocaleLowerCase();\n        return allContacts.filter(contact => \n            contact.name.toLocaleLowerCase().includes(lowerCasedFilter));\n    },\n);\n\n","import { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { useEffect } from 'react';\nimport { contactsOperations, contactsSelectors } from 'redux/contactForm';\nimport s from './ContactList.module.css';\n\nconst ContactList = ({ contacts, onDeleteContact, fetchContacts }) => {\n    useEffect(() => {\n        fetchContacts();\n    }, [fetchContacts]);\n    \n    return contacts.length > 0 && (\n        <ul className={s.list}>\n            {contacts.map(({ id, name, number }) => (\n                <li key={id} className={s.item}>\n                    <span>{name}:</span>\n                    <span>{number}</span>\n                    <button type=\"button\" onClick={() => onDeleteContact(id)}>Delete</button>\n                </li>\n            ))}\n        </ul>\n    )\n};\n\nconst mapStateToProps = (state) => ({\n    contacts: contactsSelectors.getVisibleContacts(state), \n});\n\nconst mapDispatchToProps = dispatch => ({\n    onDeleteContact: id => dispatch(contactsOperations.deleteContact(id)),\n    fetchContacts: () => dispatch(contactsOperations.fetchContacts()),\n});\n\nContactList.propTypes = {\n    contacts: PropTypes.arrayOf(PropTypes.object),\n    onDeleteContact: PropTypes.func.isRequired,\n    fetchContacts: PropTypes.func,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);","import { useState } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { contactsOperations, contactsSelectors } from 'redux/contactForm';\nimport shortid from 'shortid';\nimport s from './ContactForm.module.css';\n\nfunction ContactForm ({ contacts, onSubmit, isLoading }) {\n    const [name, setName] = useState('');\n    const [number, setNumber] = useState('');\n\n    const nameInputId = shortid.generate();\n    const numberInputId = shortid.generate();\n\n    const handleChange = (evt) => {\n        const { value, name } = evt.currentTarget;\n        if(name === 'name') {\n            setName(value);\n        } if (name === 'number') {\n            setNumber(value);\n        }\n    };\n\n    const addContact = ( name, number ) => {\n        const foundNames = contacts.map(contact => contact.name.toLocaleLowerCase());\n        const lowerName = name.toLocaleLowerCase();\n        if(foundNames.includes(lowerName)){\n         return alert(`${name} is already in contacts`);\n        }\n        onSubmit(name, number);\n\n    };\n\n    const handleSubmit = (evt) => {\n        evt.preventDefault();\n        addContact(name, number);\n        reset();\n    };\n\n    const reset = () => {\n        setName('');\n        setNumber('');\n    };\n\n    return (\n        <>\n            <form onSubmit={handleSubmit} className={s.form}>\n                <label className={s.label} htmlFor={nameInputId}>Name</label>\n                <input\n                    className={s.input}\n                    value={name}\n                    type=\"text\"\n                    name=\"name\"\n                    id={nameInputId}\n                    pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                    title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n                    required\n                    onChange={handleChange}\n                />\n\n                <label className={s.label} htmlFor={numberInputId}>Number</label>\n                <input\n                    className={s.input} \n                    value={number}\n                    type=\"tel\"\n                    name=\"number\"\n                    id={numberInputId}\n                    pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                    title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n                    required\n                    onChange={handleChange}\n                />\n                    \n                <button\n                className={s.button}\n                    type=\"submit\"\n                >\n                    Add contact\n                </button>\n            </form>\n            {isLoading && <h2>Loading...</h2>}\n        </>\n    );\n};\n\nconst mapStateToProps = state => ({\n    contacts: contactsSelectors.getContacts(state),\n    isLoading: contactsSelectors.getIsLoading(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n    onSubmit: (name, number) => dispatch(contactsOperations.addContact(name, number)),\n});\n\nContactForm.propTypes = {\n    contacts: PropTypes.arrayOf(PropTypes.object).isRequired,\n    onSubmit: PropTypes.func.isRequired,\n    isLoading: PropTypes.bool,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { contactsSelectors } from 'redux/contactForm';\nimport * as contactsActions from 'redux/contactForm/contacts-actions';\nimport shortid from 'shortid';\nimport s from './Filter.module.css';\n\nconst Filter = ({value, onChange}) => {\n    const inputId = shortid.generate();\n    const labeltId = shortid.generate();\n    return (\n    <>\n        <div className={s.form}>\n            <label htmlFor={labeltId} className={s.label}> Find contacts by name</label>\n            <input className={s.input} id={inputId} type=\"text\" value={value} onChange={onChange}/>\n        </div>\n    </>\n    )\n}    \n\nFilter.propTypes = {\n    value: PropTypes.string,\n    onChange: PropTypes.func,\n};\n\nconst mapStateToProps = state => ({\n    value: contactsSelectors.getFilter(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n    onChange: evt => dispatch(contactsActions.changeFilter(evt.target.value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);","import { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { contactsSelectors } from 'redux/contactForm';\nimport ContactList from \"../ContactList\";\nimport ContactForm from \"../ContactForm\";\nimport Filter from \"../Filter\";\nimport s from './ContactsWrapper.module.css';\n\nfunction ContactsWrapper ({ contacts }) {\n    return (\n        <div className={s.context}>\n        <h1 className=\"text\">Phonebook</h1>\n        <ContactForm />\n        {contacts.length > 0 &&\n        <> \n          <Filter />\n          <h2 className=\"text\">Contacts</h2>\n        </>\n        }\n        <ContactList />\n      </div>\n    );\n};\n\nconst mapStateToProps = (state) => ({\n    contacts: contactsSelectors.getContacts(state),\n});\n  \nContactsWrapper.propTypes = {\n    contacts: PropTypes.arrayOf(PropTypes.object),\n};\n\nexport default connect(mapStateToProps, null)(ContactsWrapper);","import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"sourceRoot":""}
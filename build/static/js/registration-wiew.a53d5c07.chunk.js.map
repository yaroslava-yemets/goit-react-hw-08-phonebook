{"version":3,"sources":["views/Form.module.css","views/Registration/Registration.js"],"names":["module","exports","INITIAL_VALUES","name","email","password","Registration","dispatch","useDispatch","errorMessage","useSelector","authSelectors","getErrorMessage","useState","showPassword","setShowPassword","validate","useCallback","values","errors","length","test","handleSubmit","setSubmitting","console","log","authOperations","register","handleClickShowPassword","className","s","formWrapper","formTitle","initialValues","onSubmit","isSubmitting","touched","handleBlur","handleChange","form","TextField","fullWidth","id","label","value","onBlur","onChange","error","Boolean","helperText","Box","sx","display","type","Button","onClick","color","variant","disabled","Object","keys","registerInfo","to","link","Alert","severity"],"mappings":"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","file":"static/js/registration-wiew.a53d5c07.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formWrapper\":\"Form_formWrapper__pes7n\",\"formTitle\":\"Form_formTitle__2OH_D\",\"form\":\"Form_form__2dlLs\",\"registerInfo\":\"Form_registerInfo__vYh4m\",\"link\":\"Form_link__2YWq5\"};","import React, { useCallback, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { Formik } from 'formik';\nimport Button from '@material-ui/core/Button';\nimport Box from '@material-ui/core/Box';\nimport TextField from '@material-ui/core/TextField';\nimport { authOperations, authSelectors } from 'redux/auth';\nimport s from '../Form.module.css';\nimport VisibilityIcon from '@material-ui/icons/Visibility';\nimport VisibilityOffIcon from '@material-ui/icons/VisibilityOff';\nimport Alert from '@mui/material/Alert';\n\n\n\nconst INITIAL_VALUES = {\n    name: \"\",\n    email: \"\",\n    password: \"\",\n};\n\nconst Registration = () => {\n    const dispatch = useDispatch();\n    const errorMessage = useSelector(authSelectors.getErrorMessage);\n    const [showPassword, setShowPassword] = useState(false);\n\n    const validate = useCallback((values) => {\n        const errors = {};\n        if (!values.name) {\n            errors.name = 'Required';\n        } else if (values.name.length < 3) {\n            errors.name = 'Name should contain more then 3 symbols';\n        }\n\n        if (!values.email) {\n            errors.email = 'Required';\n        } else if (\n            !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)\n        ) {\n            errors.email = 'Invalid email address';\n        }\n\n        if (!values.password) {\n            errors.password = 'Required';\n        } else if (values.password.length < 8) {\n            errors.password = 'Password should contain more then 8 symbols';\n        }\n\n        return errors;\n    }, []);\n\n    const handleSubmit = useCallback((values, { setSubmitting }) => {\n        console.log('values', values);\n        dispatch(authOperations.register(values));\n        setSubmitting(false);\n    }, [dispatch]);\n    \n    const handleClickShowPassword = () => {\n        setShowPassword(showPassword => !showPassword);\n    };\n\n    return (\n        <div className={s.formWrapper}>\n            <h2 className={s.formTitle}>Registration form</h2>\n            <Formik\n            initialValues={INITIAL_VALUES}\n            validate={validate}\n            onSubmit={handleSubmit}\n            >\n            {({ isSubmitting, touched, errors, values, handleBlur, handleChange, handleSubmit }) => (\n                <form onSubmit={handleSubmit} className={s.form}>\n                    <TextField\n                    fullWidth\n                    id=\"name\"\n                    name=\"name\"\n                    label=\"Name\"\n                    value={values.name}\n                    onBlur={handleBlur}\n                    onChange={handleChange}\n                    error={touched.name && Boolean(errors.name)}\n                    helperText={touched.name && errors.name}\n                    />\n                    <TextField\n                    fullWidth\n                    id=\"email\"\n                    name=\"email\"\n                    label=\"Email\"\n                    value={values.email}\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    error={touched.email && Boolean(errors.email)}\n                    helperText={touched.email && errors.email}\n                    />\n                    <Box sx={{ display: 'flex'}}>\n                        <TextField\n                        fullWidth\n                        id=\"password\"\n                        name=\"password\"\n                        label=\"Password\"\n                        type={showPassword? \"text\" : \"password\"}\n                        value={values.password}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        error={touched.password && Boolean(errors.password)}\n                        helperText={touched.password && errors.password}\n                        />\n                        <Button \n                            onClick={handleClickShowPassword}\n                        > \n                            {showPassword ? <VisibilityOffIcon /> : <VisibilityIcon />}\n                        </Button>\n                    </Box>\n\n                    <Button \n                        color=\"primary\" \n                        variant=\"contained\" \n                        fullWidth type=\"submit\"\n                        disabled={\n                            isSubmitting\n                            || !(\n                                Object.keys(touched).length ===\n                                Object.keys(INITIAL_VALUES).length &&\n                                Object.keys(errors).length === 0\n                            )\n                        }\n                    >\n                    Submit\n                    </Button>\n                </form>\n            )}\n            </Formik>\n\n            <div className={s.registerInfo}>\n                <span>If you have an account  </span>\n                <Link to=\"/login\" className={s.link}>log in</Link>\n            </div>\n\n            {errorMessage && <Alert severity=\"error\">\n                {errorMessage}\n            </Alert>}\n        </div>\n    )\n};\n\nexport default Registration;"],"sourceRoot":""}